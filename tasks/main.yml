# roles/redis/tasks/main.yml
---
- name: "Include {{ ansible_distribution }} variables"
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags:
    - install
    - configure

- name: "Include {{ ansible_distribution }} tasks"
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: install

- block:
    - name: Set the tuned profile
      copy:
        src: tuned.conf
        dest: /etc/tuned/redis/
        mode: 0755
      when:
        - openio_redis_type == "redis"
        - ansible_virtualization_type != 'docker'
      tags: install

    - name: Get tuned profile.
      command: /usr/sbin/tuned-adm active
      register: tuned_active
      changed_when: false
      ignore_errors: true
      when:
        - openio_redis_type == "redis"
        - ansible_virtualization_type != 'docker'
      tags: install

    - name: Set redis tuned profile.
      command: "/usr/sbin/tuned-adm profile redis"
      ignore_errors: "{{ ansible_check_mode }}"
      when:
        - openio_redis_type == "redis"
        - ansible_virtualization_type != 'docker'
        - "'redis' not in tuned_active.stdout"
      tags: install
  when:
    - not ( openio_tuned | d(false))
    - >
      ansible_distribution_release == 'bionic'
      or ansible_distribution_major_version == "7"

- name: Make sure Ansible fact directory exists
  file:
    path: /etc/ansible/facts.d
    state: directory
    owner: root
    group: root
    mode: "0755"
  tags: configure

- name: Setup Redis local facts
  copy:
    src: "{{ openio_redis_type }}.fact"
    dest: "/etc/ansible/facts.d/{{ openio_redis_type }}.fact"
    owner: root
    group: root
    mode: "0755"
  register: _redis_local_facts
  tags: configure
  no_log: true

- name: Reload local facts
  setup:
    filter: ansible_local
    gather_subset: min
  tags: configure

- name: Set fake facts for check mode
  set_fact:
    ansible_local:
      redis: {}
      redissentinel: {}
  when: ansible_check_mode
  tags: configure

- name: Register master informations
  set_fact:
    master_host: "{{ ansible_local[openio_redis_type]
      | redis_master_property(property='master_host',
                              redis_type=openio_redis_type,
                              namespace=openio_redis_namespace,
                              service=openio_redis_servicename,
                              monitor_name=openio_redis_master_groupname)
      | default(openio_redis_master.address, true) }}"

    master_port: "{{ ansible_local[openio_redis_type]
      | redis_master_property(property='master_port',
                              redis_type=openio_redis_type,
                              namespace=openio_redis_namespace,
                              service=openio_redis_servicename,
                              monitor_name=openio_redis_master_groupname)
      | default(openio_redis_master.port, true) }}"
  tags: configure

- name: Ensure directories exists
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('openio') }}"
    group: "{{ item.group | default('openio') }}"
    mode: "{{ item.mode | default(0755) }}"
  with_items:
    - path: "/etc/gridinit.d/{{ openio_redis_namespace }}"
    - path: "{{ openio_redis_sysconfig_dir }}/{{ openio_redis_servicename }}"
    - path: "{{ openio_redis_volume }}"
    - path: "{{ openio_redis_pid_directory }}"
    - path: "/var/log/oio/sds/{{ openio_redis_namespace }}/{{ openio_redis_servicename }}"
      owner: "{{ syslog_user }}"
      mode: "0770"
  tags: configure

- name: Ensure Redis pid directory is persistant
  lineinfile:
    dest: /etc/tmpfiles.d/redis.conf
    create: true
    line: "d {{ openio_redis_pid_directory }} 755 openio openio -"
    owner: openio
    group: openio
    mode: 0644
  tags: configure
  when: openio_redis_pid_directory.split(' ')[0] | dirname is match("/run/.*")

- name: Generate configuration files
  template:
    src: "gridinit_redis.conf.j2"
    dest: "{{ openio_redis_gridinit_dir }}/{{ openio_redis_gridinit_file_prefix }}{{ openio_redis_servicename }}.conf"
    owner: openio
    group: openio
    mode: 0644
  register: _gridinit_conf
  tags: configure

- block:
    - name: Generate {{ openio_redis_type }} configur7ation
      lineinfile:
        create: true
        dest: "{{ openio_redis_sysconfig_dir }}/\
          {{ openio_redis_servicename }}/{{ openio_redis_type }}.conf"
        line: "{{ line }}"
        mode: 0644
        owner: openio
        group: openio
      with_items: "{{ lookup('template', openio_redis_type ~ '.conf.j2').splitlines() }}"
      loop_control:
        loop_var: line
      register: _redis_conf
      tags: configure
  when: not openio_redis_configuration_split

- block:
    - name: Generate main {{ openio_redis_type }} configuration
      lineinfile:
        create: true
        dest: "{{ openio_redis_sysconfig_dir }}/\
          {{ openio_redis_servicename }}/{{ openio_redis_type }}.conf"
        line: "include {{ openio_redis_sysconfig_dir }}/\
          {{ openio_redis_servicename }}/{{ openio_redis_type }}-{{ openio_redis_bind_port }}.conf"
        mode: 0644
        owner: openio
        group: openio
      register: _redis_conf_main_split
      tags: configure

    - name: Add master information in main {{ openio_redis_type }} configuration
      lineinfile:
        create: true
        dest: "{{ openio_redis_sysconfig_dir }}/\
          {{ openio_redis_servicename }}/{{ openio_redis_type }}.conf"
        line: "{{ item.line }}"
        mode: 0644
        owner: openio
        group: openio
        regexp: "{{ item.regexp }}"
      register: _redis_conf_main_split_master
      when: openio_redis_type == 'redissentinel'
      with_items:
        - line: "sentinel monitor {{ openio_redis_master_groupname }} \
            {{ master_host }} {{ master_port }} {{ openio_redis_quorum }}"
          regexp: "^sentinel monitor {{ openio_redis_master_groupname }}"
        - line: "sentinel down-after-milliseconds {{ openio_redis_master_groupname }} {{ openio_redis_down_after }}"
          regexp: "^sentinel down-after-milliseconds {{ openio_redis_master_groupname }}"
      tags: configure

    - name: Generate split {{ openio_redis_type }} configuration
      template:
        src: "{{ openio_redis_type }}.conf.j2"
        dest: "{{ openio_redis_sysconfig_dir }}/\
          {{ openio_redis_servicename }}/{{ openio_redis_type }}-{{ openio_redis_bind_port }}.conf"
        owner: openio
        group: openio
        mode: 0644
      register: _redis_conf_sub_split
      tags: configure
  when: openio_redis_configuration_split

- name: "restart redis to apply the new configuration"
  shell: |
    gridinit_cmd reload
    gridinit_cmd restart  {{ openio_redis_namespace }}-{{ openio_redis_servicename }}
  register: _restart_redis
  when:
    - _redis_conf is changed or _gridinit_conf is changed
    - not openio_redis_provision_only
  tags: configure

- block:
    - name: "Ensure redis is started"
      command: gridinit_cmd start {{ openio_redis_namespace }}-{{ openio_redis_servicename }}
      register: _start_redis
      changed_when: '"Success" in _start_redis.stdout'
      when:
        - not openio_redis_provision_only
        - _restart_redis is skipped
      tags: configure

    - name: set slave status on bootstrap
      redis:
        login_host: "{{ openio_redis_bind_address }}"
        login_port: "{{ openio_redis_bind_port }}"
        command: slave
        master_host: "{{ master_host }}"
        master_port: "{{ master_port }}"
      register: set_slave
      until: set_slave is success
      retries: 5
      delay: 2
      when:
        - openio_redis_type == 'redis'
        - master_host not in ansible_all_ipv4_addresses
      tags: configure
      ignore_errors: "{{ ansible_check_mode }}"

    - name: check redis
      command: "redis-cli -h {{ openio_redis_bind_address }} -p {{ openio_redis_bind_port }} INFO"
      register: _redis_check
      retries: 3
      delay: 5
      until: _redis_check is success
      changed_when: false
      tags: configure
      when:
        - not openio_redis_provision_only
  when: openio_bootstrap | d(false)
...
